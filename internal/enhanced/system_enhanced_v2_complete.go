package enhanced

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"

	"github.com/ThatsRight-ItsTJ/Your-PaL-MoE/pkg/selection"
)

// EnhancedSystemV2 uses the model database for accurate provider selection
type EnhancedSystemV2 struct {
	providers []selection.Provider
	selector  *selection.EnhancedAdaptiveSelector
}

// NewEnhancedSystemV2 creates a new enhanced system with model database integration
func NewEnhancedSystemV2(providers []selection.Provider) *EnhancedSystemV2 {
	return &EnhancedSystemV2{
		providers: providers,
		selector:  selection.NewEnhancedAdaptiveSelector(providers),
	}
}

// ProcessRequest handles a request using enhanced provider selection
func (es *EnhancedSystemV2) ProcessRequest(request string) (*ProcessResponse, error) {
	log.Printf("üöÄ Processing request with enhanced system v2: %.100s...", request)

	// Select the best provider using enhanced model database
	provider, confidence, err := es.selector.SelectProvider(request)
	if err != nil {
		return nil, fmt.Errorf("provider selection failed: %w", err)
	}

	log.Printf("‚úÖ Enhanced selection: %s (confidence: %.2f%%)", provider.Name, confidence*100)

	// Get detailed analysis for logging
	analysis := es.selector.AnalyzeRequest(request)
	if analysisJSON, err := json.MarshalIndent(analysis, "", "  "); err == nil {
		log.Printf("üìä Detailed analysis:\n%s", string(analysisJSON))
	}

	// Generate response (mock for now)
	response := es.generateResponse(provider, request, confidence)

	return response, nil
}

// generateResponse creates a mock response from the selected provider
func (es *EnhancedSystemV2) generateResponse(provider *selection.Provider, request string, confidence float64) *ProcessResponse {
	// Determine response type based on provider capabilities
	taskType := es.selector.GetDetector().DetectTaskType(request)
	
	var responseContent string
	var responseType string

	switch taskType {
	case selection.TaskTypeImage:
		responseContent = fmt.Sprintf("üé® [MOCK IMAGE GENERATION] Generated image using %s models: %v", 
			provider.Name, provider.Models)
		responseType = "image_generation"
		
	case selection.TaskTypeCode:
		responseContent = fmt.Sprintf("üíª [MOCK CODE GENERATION] Generated code using %s models: %v\n\n```python\n# Example code generated by %s\ndef hello_world():\n    print('Hello from %s!')\n```", 
			provider.Name, provider.Models, provider.Name, provider.Name)
		responseType = "code_generation"
		
	case selection.TaskTypeAudio:
		responseContent = fmt.Sprintf("üéµ [MOCK AUDIO PROCESSING] Processed audio using %s models: %v", 
			provider.Name, provider.Models)
		responseType = "audio_processing"
		
	case selection.TaskTypeVideo:
		responseContent = fmt.Sprintf("üé¨ [MOCK VIDEO PROCESSING] Processed video using %s models: %v", 
			provider.Name, provider.Models)
		responseType = "video_processing"
		
	case selection.TaskTypeMultimodal:
		responseContent = fmt.Sprintf("üîÑ [MOCK MULTIMODAL] Processed multimodal request using %s models: %v", 
			provider.Name, provider.Models)
		responseType = "multimodal"
		
	default: // TaskTypeText
		responseContent = fmt.Sprintf("üìù [MOCK TEXT GENERATION] Generated text response using %s models: %v\n\nThis is a mock response to: %s", 
			provider.Name, provider.Models, request)
		responseType = "text_generation"
	}

	return &ProcessResponse{
		Content:    responseContent,
		Provider:   provider.Name,
		Models:     provider.Models,
		Confidence: confidence,
		Metadata: map[string]interface{}{
			"task_type":        string(taskType),
			"response_type":    responseType,
			"selection_method": "enhanced_model_database",
			"provider_url":     provider.BaseURL,
			"model_count":      len(provider.Models),
		},
	}
}

// GetProviders returns the list of providers
func (es *EnhancedSystemV2) GetProviders() []selection.Provider {
	return es.providers
}

// GetProviderCapabilities returns detailed capabilities for all providers
func (es *EnhancedSystemV2) GetProviderCapabilities() map[string]selection.ProviderCapabilities {
	return es.selector.GetProviderCapabilities()
}

// GetDetailedModelCapabilities returns per-model capabilities
func (es *EnhancedSystemV2) GetDetailedModelCapabilities() map[string]map[string]selection.ModelCapabilities {
	return es.selector.GetDetailedModelCapabilities()
}

// AnalyzeRequest provides detailed analysis of provider selection
func (es *EnhancedSystemV2) AnalyzeRequest(request string) map[string]interface{} {
	return es.selector.AnalyzeRequest(request)
}

// GetModelDatabaseStats returns model database statistics
func (es *EnhancedSystemV2) GetModelDatabaseStats() map[string]interface{} {
	return es.selector.GetModelDatabaseStats()
}

// ValidateProviders checks if all providers have valid configurations
func (es *EnhancedSystemV2) ValidateProviders() map[string][]string {
	issues := make(map[string][]string)
	
	for _, provider := range es.providers {
		var providerIssues []string
		
		// Check basic provider configuration
		if provider.Name == "" {
			providerIssues = append(providerIssues, "Provider name is empty")
		}
		
		if provider.BaseURL == "" {
			providerIssues = append(providerIssues, "Provider BaseURL is empty")
		}
		
		if len(provider.Models) == 0 {
			providerIssues = append(providerIssues, "Provider has no models configured")
		}
		
		// Validate detected capabilities
		capabilities := es.selector.GetProviderCapabilities()[provider.Name]
		if valid, warnings := es.selector.GetDetector().ValidateCapabilities(capabilities); !valid {
			providerIssues = append(providerIssues, warnings...)
		}
		
		if len(providerIssues) > 0 {
			issues[provider.Name] = providerIssues
		}
	}
	
	return issues
}

// RefreshModelDatabase clears the model database cache
func (es *EnhancedSystemV2) RefreshModelDatabase() {
	es.selector.GetDetector().RefreshModelCache()
	log.Println("üîÑ Model database cache refreshed")
}

// SetSelectionWeights allows customizing provider selection criteria
func (es *EnhancedSystemV2) SetSelectionWeights(weights selection.SelectionWeights) {
	es.selector.SetSelectionWeights(weights)
	log.Printf("‚öñÔ∏è Selection weights updated: %+v", weights)
}

// GetSystemInfo returns comprehensive system information
func (es *EnhancedSystemV2) GetSystemInfo() map[string]interface{} {
	providerCount := len(es.providers)
	totalModels := 0
	
	for _, provider := range es.providers {
		totalModels += len(provider.Models)
	}
	
	return map[string]interface{}{
		"version":           "2.0.0-enhanced",
		"provider_count":    providerCount,
		"total_models":      totalModels,
		"capabilities":      es.GetProviderCapabilities(),
		"model_db_stats":    es.GetModelDatabaseStats(),
		"selection_method":  "enhanced_adaptive_with_model_database",
		"features": []string{
			"model_database_integration",
			"huggingface_api_support",
			"per_model_capability_analysis",
			"enhanced_task_detection",
			"weighted_provider_scoring",
			"capability_validation",
		},
	}
}